subjID = rownames(y)
Nitem = ncol(y)
Nsubj = nrow(y)
v = ncol(y)
n = nrow(y)
L = (l - 1)
prec  = tryCatch(prec, error=function(e) apply(y,1,sd)/sqrt(Nitem))
prec[prec == 0] <- mean(prec[prec != 0])
thetain  = tryCatch(thetain, error=function(e) rowMeans(y) )
knot <- tryCatch(knot, error=function(e)
unique(c(0,quantile(thetain, seq(0,1,len=length(thetain)), type=5),1)))
nk    = length(knot)
dataList = list( y=y, L=L, Nsubj=Nsubj, Nitem=Nitem, prec=prec,
thetain=thetain, p=p, nk=nk, knots=knot )
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
y[i,j] ~ dbin( pCorr[i,j] , L)
pCorr[i,j] <-
ifelse(M == 1, ilogit( AbilR[i] - DiffR[j] ),
ifelse(M == 2, ((p * AbilC[i]) /( (p * AbilC[i]) + ((1-p) * DiffC[j]) )),
ilogit( W[i,j] ) ))
W[i,j]  <- W0[pi[i,j],j]
W0[i,j] <- sum(Beta[1:nk,j] * Z[i,1:nk])
pi[i,j] ~ dcat(pp[1:Nsubj])
}
}
### Model selection
M ~ dcat(alpha[1:3])
for (d in 1:3) {
D[d]      ~ dexp( delta )
di_raw[d] ~ dgamma(D[d] + 1, 1)
alpha[d]   <- di_raw[d]/sum(di_raw[1:3])
}
### Dirichlet distribution prior
for(i in 1:Nsubj) {
c[i]      ~ dexp( kappa )
xi_raw[i] ~ dgamma(c[i] + 1, 1)
pp[i]     <- xi_raw[i]/sum(xi_raw[1:Nsubj])
}
### Rademacher basis
for (j in 1:Nitem) {
for (l in 1:nk) {
Beta[l,j] ~ dnorm( betamu , betasd )
}
}
for (l in 1:nk) {
for (i in 1:Nsubj) {
Z[i,l] <- ifelse( Abil[i] <= knots[l], -1, 1 )
}
}
### Ability estimates
for ( i in 1:Nsubj ) {
AbilR[i] ~ dnorm( muAbil , sigmaAbil )
AbilC[i] ~ dbeta( (ACIRM*(AsCIRM-2)) + 1 ,
((1 - ACIRM)*(AsCIRM-2)) + 1 )
Abil[i] ~ dbeta( (thetain[i]*(1/prec[i])) + 1 ,
((1 - thetain[i])*(1/prec[i])) + 1 )
}
### Difficulty estimates
for ( j in 1:Nitem ) {
DiffR[j] ~ dnorm( muDiff , sigmaDiff )
DiffC[j] ~ dbeta( (DCIRM*(DsCIRM-2)) + 1 , ((1 - DCIRM)*(DsCIRM-2)) + 1 )
}
### Endless priors
ACIRM  ~ dbeta(1,1)
AsCIRM <- AsmTwo + 2
AsmTwo ~ dgamma(.01,.01)
DCIRM  ~ dbeta(1,1)
DsCIRM <- DsmTwo + 2
DsmTwo ~ dgamma(.01,.01)
muAbil    ~ dnorm(0,.001)
sigmaAbil ~ dgamma(.01,.01)
muDiff    ~ dnorm(0,.001)
sigmaDiff ~ dgamma(.01,.01)
delta ~ dunif( 1e-2, 1e2 )
kappa ~ dunif( 1e-2, 1e2 )
betamu ~ dnorm( 0, 1e2 )
betasd  ~ dunif( 1e-2, 1e2 )
}
" # close quote for modelString
model = textConnection(modelString)
# Run the chains====
# Name the parameters to be monitored
params <- c("alpha","M")
# Random initial values
inits <- function(){list("omega"=stats::rbeta(Nsubj,1,1),
"kappaMinusTwo"=stats::rgamma(Nitem,1,1))}
# Define some MCMC parameters for JAGS
nthin    = 1    # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 100  # How Many Burn-in Samples?
nsamples = 1100 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
samples
hist(samples$BUGSoutput$sims.list$M)
unique(samples$BUGSoutput$sims.list$M)
p = p
Nitem = ncol(y)
Nsubj = nrow(y)
v = ncol(y)
n = nrow(y)
L = (l - 1)
prec  = tryCatch(prec, error=function(e) apply(y,1,sd)/sqrt(Nitem))
prec[prec == 0] <- mean(prec[prec != 0])
thetain  = tryCatch(thetain, error=function(e) rowMeans(y) )
knot <- tryCatch(knot, error=function(e)
unique(c(0,quantile(thetain, seq(0,1,len=length(thetain)), type=5),1)))
nk    = length(knot)
dataList = list( y=y, L=L, Nsubj=Nsubj, Nitem=Nitem, prec=prec,
thetain=thetain, p=p, nk=nk, knots=knot )
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
y[i,j] ~ dbin( pCorr[i,j] , L)
pCorr[i,j] <-
ifelse(M == 1, ilogit( AbilR[i] - DiffR[j] ),
ifelse(M == 2, ((p * AbilC[i]) /( (p * AbilC[i]) + ((1-p) * DiffC[j]) )),
ilogit( W[i,j] ) ))
W[i,j]  <- W0[pi[i,j],j]
W0[i,j] <- sum(Beta[1:nk,j] * Z[i,1:nk])
pi[i,j] ~ dcat(pp[1:Nsubj])
}
}
### Model selection
M ~ dcat(alpha[1:3])
for (d in 1:3) {
D[d]      ~ dexp( delta )
di_raw[d] ~ dgamma(D[d] + 1, 1)
alpha[d]   <- di_raw[d]/sum(di_raw[1:3])
}
### Dirichlet distribution prior
for(i in 1:Nsubj) {
c[i]      ~ dexp( kappa )
xi_raw[i] ~ dgamma(c[i] + 1, 1)
pp[i]     <- xi_raw[i]/sum(xi_raw[1:Nsubj])
}
### Rademacher basis
for (j in 1:Nitem) {
for (l in 1:nk) {
Beta[l,j] ~ dnorm( betamu , betasd )
}
}
for (l in 1:nk) {
for (i in 1:Nsubj) {
Z[i,l] <- ifelse( Abil[i] <= knots[l], -1, 1 )
}
}
### Ability estimates
for ( i in 1:Nsubj ) {
AbilR[i] ~ dnorm( muAbil , sigmaAbil )
AbilC[i] ~ dbeta( (ACIRM*(AsCIRM-2)) + 1 ,
((1 - ACIRM)*(AsCIRM-2)) + 1 )
Abil[i] ~ dbeta( (thetain[i]*(1/prec[i])) + 1 ,
((1 - thetain[i])*(1/prec[i])) + 1 )
}
### Difficulty estimates
for ( j in 1:Nitem ) {
DiffR[j] ~ dnorm( muDiff , sigmaDiff )
DiffC[j] ~ dbeta( (DCIRM*(DsCIRM-2)) + 1 , ((1 - DCIRM)*(DsCIRM-2)) + 1 )
}
### Endless priors
ACIRM  ~ dbeta(1,1)
AsCIRM <- AsmTwo + 2
AsmTwo ~ dgamma(.01,.01)
DCIRM  ~ dbeta(1,1)
DsCIRM <- DsmTwo + 2
DsmTwo ~ dgamma(.01,.01)
muAbil    ~ dnorm(0,.001)
sigmaAbil ~ dgamma(.01,.01)
muDiff    ~ dnorm(0,.001)
sigmaDiff ~ dgamma(.01,.01)
delta ~ dunif( 1e-2, 1e2 )
kappa ~ dunif( 1e-2, 1e2 )
betamu ~ dnorm( 0, 1e2 )
betasd  ~ dunif( 1e-2, 1e2 )
}
" # close quote for modelString
model = textConnection(modelString)
# Run the chains====
# Name the parameters to be monitored
params <- c("alpha","M")
# Random initial values
inits <- function(){list("omega"=stats::rbeta(Nsubj,1,1),
"kappaMinusTwo"=stats::rgamma(Nitem,1,1))}
# Define some MCMC parameters for JAGS
nthin    = 2    # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 200  # How Many Burn-in Samples?
nsamples = 2200 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
### Inspect and diagnose the run====
samples
hist(samples$BUGSoutput$sims.list$alpha[,,1])
hist(samples$BUGSoutput$sims.list$alpha[,1])
hist(samples$BUGSoutput$sims.list$alpha[,2])
hist(samples$BUGSoutput$sims.list$alpha[,3])
hist(samples$BUGSoutput$sims.list$alpha[,4])
hist(samples$BUGSoutput$sims.list$alpha[,3])
hist(samples$BUGSoutput$sims.list$alpha[,1])
hist(samples$BUGSoutput$sims.list$alpha[,2])
p = p
Nitem = ncol(y)
Nsubj = nrow(y)
v = ncol(y)
n = nrow(y)
L = (l - 1)
prec  = tryCatch(prec, error=function(e) apply(y,1,sd)/sqrt(Nitem))
prec[prec == 0] <- mean(prec[prec != 0])
thetain  = tryCatch(thetain, error=function(e) rowMeans(y) )
knot <- tryCatch(knot, error=function(e)
unique(c(0,quantile(thetain, seq(0,1,len=length(thetain)), type=5),1)))
nk    = length(knot)
dataList = list( y=y, L=L, Nsubj=Nsubj, Nitem=Nitem, prec=prec,
thetain=thetain, p=p, nk=nk, knots=knot )
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
y[i,j] ~ dbin( pCorr[i,j] , L)
pCorr[i,j] <-
ifelse(M == 1, ilogit( AbilR[i] - DiffR[j] ),
ifelse(M == 2, ((p * AbilC[i]) /( (p * AbilC[i]) + ((1-p) * DiffC[j]) )),
ilogit( W[i,j] ) ))
W[i,j]  <- W0[pi[i,j],j]
W0[i,j] <- sum(Beta[1:nk,j] * Z[i,1:nk])
pi[i,j] ~ dcat(pp[1:Nsubj])
}
}
### Model selection
M ~ dcat(alpha[1:3])
for (d in 1:3) {
D[d]      ~ dexp( delta )
di_raw[d] ~ dgamma(D[d] + 1, 1)
alpha[d]   <- di_raw[d]/sum(di_raw[1:3])
}
### Dirichlet distribution prior
for(i in 1:Nsubj) {
c[i]      ~ dexp( kappa )
xi_raw[i] ~ dgamma(c[i] + 1, 1)
pp[i]     <- xi_raw[i]/sum(xi_raw[1:Nsubj])
}
### Rademacher basis
for (j in 1:Nitem) {
for (l in 1:nk) {
Beta[l,j] ~ dnorm( betamu , betasd )
}
}
for (l in 1:nk) {
for (i in 1:Nsubj) {
Z[i,l] <- ifelse( Abil[i] <= knots[l], -1, 1 )
}
}
### Ability estimates
for ( i in 1:Nsubj ) {
AbilR[i] ~ dnorm( muAbil , sigmaAbil )
AbilC[i] ~ dbeta( (ACIRM*(AsCIRM-2)) + 1 ,
((1 - ACIRM)*(AsCIRM-2)) + 1 )
Abil[i] ~ dbeta( (thetain[i]*(1/prec[i])) + 1 ,
((1 - thetain[i])*(1/prec[i])) + 1 )
}
### Difficulty estimates
for ( j in 1:Nitem ) {
DiffR[j] ~ dnorm( muDiff , sigmaDiff )
DiffC[j] ~ dbeta( (DCIRM*(DsCIRM-2)) + 1 , ((1 - DCIRM)*(DsCIRM-2)) + 1 )
}
### Endless priors
ACIRM  ~ dbeta(1,1)
AsCIRM <- AsmTwo + 2
AsmTwo ~ dgamma(.01,.01)
DCIRM  ~ dbeta(1,1)
DsCIRM <- DsmTwo + 2
DsmTwo ~ dgamma(.01,.01)
muAbil    ~ dnorm(0,.001)
sigmaAbil ~ dgamma(.01,.01)
muDiff    ~ dnorm(0,.001)
sigmaDiff ~ dgamma(.01,.01)
delta ~ dunif( 1e-2, 1e2 )
kappa ~ dunif( 1e-2, 1e2 )
betamu ~ dnorm( 0, 1e2 )
betasd  ~ dunif( 1e-2, 1e2 )
}
" # close quote for modelString
model = textConnection(modelString)
# Run the chains====
# Name the parameters to be monitored
params <- c("alpha","M")
# Random initial values
inits <- function(){list("omega"=stats::rbeta(Nsubj,1,1),
"kappaMinusTwo"=stats::rgamma(Nitem,1,1))}
# Define some MCMC parameters for JAGS
nthin    = 10   # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 5000  # How Many Burn-in Samples?
nsamples = 15000 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
### Inspect and diagnose the run====
samples
hist(samples$BUGSoutput$sims.list$alpha[,1])
hist(samples$BUGSoutput$sims.list$alpha[,2])
hist(samples$BUGSoutput$sims.list$alpha[,3])
samples$BUGSoutput$mean
samples$BUGSoutput$median
### Inspect and diagnose the run====
PM <- matrix(samples$BUGSoutput$median$alpha,ncol=3)
PM
### Inspect and diagnose the run====
PM <- matrix(samples$BUGSoutput$median$alpha,ncol=3)
colnames(PM) <- c("Rasch","CIRM","BayesOS")
PM
rm(list=ls())
dev.off()
library(CIRM)
library(CIRM)
x <- rnorm(100)
plot(x,y)
x <- rnorm(100)
y <- x
plot(x,y)
x <- rnorm(100)
y <- x
plot(x,y)
x <- rnorm(100)
y <- x^2
plot(x,y)
x <- rnorm(100)
y <- x
plot(x,y)
x <- rnorm(100)
y <- 2^x
plot(x,y)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y)
x <- rnorm(100)
y <- 2^x
plot(x,y)
cor(x,y)
rm(list=ls())
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
z <- x^2
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
z <- x^2
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
energy::dcor(x,w)
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
w <- x^2
plot(x,w)
cor(x,w); cor(x,w,method='spearman')
energy::dcor(x,w)
?dcor
energy::DCOR(x,w)
y <- round(x,0)
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
w <- x^2
plot(x,w)
cor(x,w); cor(x,w,method='spearman')
energy::DCOR(x,w)
rm(list=ls())
set.seed(123)
x <- rnorm(100)
y <- x
plot(x,y)
cor(x,y); cor(x,y,method='spearman')
z <- 7^x
plot(x,z)
cor(x,z); cor(x,z,method='spearman')
w <- x^2
plot(x,w)
cor(x,w); cor(x,w,method='spearman')
energy::dcor(x,w)
cor.test(x,w); cor(x,w,method='spearman')
cor.test(x,w); cor.test(x,w,method='spearman')
energy::dcor.test(x,w)
?dcor.test
energy::dcor.test(x,w,1)
energy::dcor.test(x,w,R=1)
energy::dcor.test(x,w,R=2)
energy::dcor.test(x,w,R=length(n))
energy::dcor.test(x,w,R=length(x))
log(.5)
exp(.5)
exp(.05)
cor(y,z)
energy::pdcor(y,z,x)
energy::pdcor(y,z)
?pdcor
energy::dcor(y,z)
energy::pdcor(y,z)
energy::pdcor(y,z,x)
energy::pdcor(x,y,z)
energy::pdcor(x,z,y)
dcor(cbind(x,z,y))
energy::dcor(cbind(x,z,y))
energy::DCOR(cbind(x,z,y))
rm(list=ls())
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
require(bnlearn)
?hc
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
install.packages(c("coda", "DPpackage", "fitdistrplus", "R2jags"))
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
library(CIRM)
