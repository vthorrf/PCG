?jags
require(R2jags)
?jags
x <- CIRM::simCIRM(100,10,2,123,standard=T)$data
p = .5
l=2
y = x
p = p
itemID = colnames(y)
subjID = rownames(y)
Nitem = ncol(y)
Nsubj = nrow(y)
v = ncol(y)
n = nrow(y)
L = (l - 1)
dataList = list( y=y, p=p, Nsubj=Nsubj, Nitem=Nitem, L=L)
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
SQE[i,j] <- (ypred[i,j] - y[i,j]) ^ 2
ypred[i,j] <- pCorr[i,j] * L
y[i,j] ~ dbin( pCorr[i,j] , L)
pCorr[i,j] <- (p * subjAbil[i]) /
( (p * subjAbil[i]) + ((1-p) * itemDiff[j]) )
}
}
for ( subjIdx in 1:Nsubj ) {
subjAbil[subjIdx] ~ dbeta( (mu*(sigma-2)) + 1 , ((1 - mu)*(sigma-2)) + 1  )
}
for ( itemIdx in 1:Nitem ) {
itemDiff[itemIdx] ~ dbeta( (omega*(kappa-2)) + 1 , ((1 - omega)*(kappa-2)) + 1 )
}
RMSD <- sqrt(mean(SQE[1:Nsubj,1:Nitem]))
mu            ~ dbeta(1,1)
sigma         <- sigmaMinusTwo + 2
sigmaMinusTwo ~ dgamma(.01,.01)
omega         ~ dbeta(1,1)
kappa         <- kappaMinusTwo + 2
kappaMinusTwo ~ dgamma(.01,.01)
}
" # close quote for modelString
model = textConnection(modelString)
# Run the chains====
# Name the parameters to be monitored
params <- c("pCorr","subjAbil","itemDiff","RMSD")
# Random initial values
inits <- function(){list("subjAbil"=stats::rbeta(Nsubj,1,1),
"itemDiff"=stats::rbeta(Nitem,1,1))}
# Define some MCMC parameters for JAGS
nthin    = 1    # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 100  # How Many Burn-in Samples?
nsamples = 1100 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
samples$BUGSoutput$sims.list$RMSD
hist(samples$BUGSoutput$sims.list$RMSD)
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
SQE[i,j] <- abs(ypred[i,j] - y[i,j])
ypred[i,j] <- pCorr[i,j] * L
y[i,j] ~ dbin( pCorr[i,j] , L)
pCorr[i,j] <- (p * subjAbil[i]) /
( (p * subjAbil[i]) + ((1-p) * itemDiff[j]) )
}
}
for ( subjIdx in 1:Nsubj ) {
subjAbil[subjIdx] ~ dbeta( (mu*(sigma-2)) + 1 , ((1 - mu)*(sigma-2)) + 1  )
}
for ( itemIdx in 1:Nitem ) {
itemDiff[itemIdx] ~ dbeta( (omega*(kappa-2)) + 1 , ((1 - omega)*(kappa-2)) + 1 )
}
MAE <- mean(SQE[1:Nsubj,1:Nitem])
mu            ~ dbeta(1,1)
sigma         <- sigmaMinusTwo + 2
sigmaMinusTwo ~ dgamma(.01,.01)
omega         ~ dbeta(1,1)
kappa         <- kappaMinusTwo + 2
kappaMinusTwo ~ dgamma(.01,.01)
}
" # close quote for modelString
model = textConnection(modelString)
# Run the chains====
# Name the parameters to be monitored
params <- c("pCorr","subjAbil","itemDiff","MAE")
# Random initial values
inits <- function(){list("subjAbil"=stats::rbeta(Nsubj,1,1),
"itemDiff"=stats::rbeta(Nitem,1,1))}
# Define some MCMC parameters for JAGS
nthin    = 1    # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 100  # How Many Burn-in Samples?
nsamples = 1100 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
hist(samples$BUGSoutput$sims.list$MAE)
rm(list=ls())
dev.off()
y <- CIRM::simRasch(100,10,2,666,T)
x <- CIRM::simRasch(100,10,2,666,T)
l = 2
y <- x$data
Nitem = ncol(y)
Nsubj = nrow(y)
L     = (l - 1)
dataList = list( y=y, L=L, Nsubj=Nsubj, Nitem=Nitem )
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
y[i,j] ~ dbin( Pr[i,j] , L)
Pr[i,j] ~ dbeta(Abil[i], Diff[j])
}
}
### Theta distribution
for ( i in 1:Nsubj ) {
Abil[i] ~ dgamma( aT , bT )
}
### Delta distribution
for ( j in 1:Nitem ) {
Diff[j] ~ dgamma( aD , bD )
}
### Priors
aT ~ dgamma(1e-2,1e-2) # Ability shape
bT ~ dgamma(1e-2,1e-2) # Ability rate
aD ~ dgamma(1e-2,1e-2) # Difficulty shape
bD ~ dgamma(1e-2,1e-2) # Difficulty rate
}
" # close quote for modelString
model = textConnection(modelString)
?rgamma
log(1)
# Run the chains====
# Name the parameters to be monitored
params <- c("Pr","Abil","Diff")
# Random initial values
inits <- function(){list("Abil" = stats::rgamma(Nsubj,1e-2,1e-2),
"Diff"   = stats::rgamma(Nitem,1e-2,1e-2))}
# Define some MCMC parameters for JAGS
nthin    = 1    # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 100  # How Many Burn-in Samples?
nsamples = 1100 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
### Gathering====
REs <- colMeans(samples$BUGSoutput$sims.list$Pr[,,])
abil <- colMeans(samples$BUGSoutput$sims.list$Abil)
plot(abil,REs[,1])
plot(abil,REs[,2])
plot(abil,REs[,3])
plot(abil,REs[,4])
plot(smooth.spline(abil,REs[,4]))
plot(smooth.spline(abil,REs[,1]))
plot(smooth.spline(abil,REs[,1]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,2]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,3]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,4]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,5]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,6]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,7]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,8]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,9]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,10]),ylim=c(0,1))
diff <- colMeans(samples$BUGSoutput$sims.list$Diff)
dic <- samples$BUGSoutput$DIC
full <- samples
matrix <- ordering(REs,abil,diff)$matrix
hist(abil)
mean(abil)
rm(list=ls())
dev.off()
x <- CIRM::simRasch(100,10,2,666,F)
y <- x$data
l=2
Nitem = ncol(y)
Nsubj = nrow(y)
L     = (l - 1)
dataList = list( y=y, L=L, Nsubj=Nsubj, Nitem=Nitem )
# Define the model====
modelString = "
model {
for ( i in 1:Nsubj ) {
for ( j in 1:Nitem ) {
y[i,j] ~ dbin( Pr[i,j] , L)
Pr[i,j] ~ dbeta(Abil[i] + 1, Diff[j] + 1)
}
}
### Theta distribution
for ( i in 1:Nsubj ) {
Abil[i] ~ dgamma( aT , bT )
}
### Delta distribution
for ( j in 1:Nitem ) {
Diff[j] ~ dgamma( aD , bD )
}
### Priors
aT ~ dgamma(1e-2,1e-2) # Ability shape
bT ~ dgamma(1e-2,1e-2) # Ability rate
aD ~ dgamma(1e-2,1e-2) # Difficulty shape
bD ~ dgamma(1e-2,1e-2) # Difficulty rate
}
" # close quote for modelString
model = textConnection(modelString)
# Run the chains====
# Name the parameters to be monitored
params <- c("Pr","Abil","Diff")
# Random initial values
inits <- function(){list("Abil" = stats::rgamma(Nsubj,1e-2,1e-2),
"Diff"   = stats::rgamma(Nitem,1e-2,1e-2))}
# Define some MCMC parameters for JAGS
nthin    = 1    # How Much Thinning?
nchains  = 3    # How Many Chains?
nburnin  = 100  # How Many Burn-in Samples?
nsamples = 1100 # How Many Recorded Samples?
### Calling JAGS to sample
startTime = proc.time()
samples <- R2jags::jags(dataList, NULL, params, model.file =model,
n.chains=nchains, n.iter=nsamples, n.burnin=nburnin,
n.thin=nthin, DIC=T, jags.seed=666)
stopTime = proc.time(); elapsedTime = stopTime - startTime; methods::show(elapsedTime)
### Gathering====
REs <- colMeans(samples$BUGSoutput$sims.list$Pr[,,])
abil <- colMeans(samples$BUGSoutput$sims.list$Abil)
plot(abil,REs)
plot(abil,REs[,1])
plot(abil,REs[,2])
plot(abil,REs[,3])
plot(abil,REs[,4])
plot(abil,REs[,5])
plot(abil,REs[,5],ylim=c(0,1))
plot(abil,REs[,1],ylim=c(0,1))
plot(abil,REs[,2],ylim=c(0,1))
plot(abil,REs[,3],ylim=c(0,1))
plot(abil,REs[,4],ylim=c(0,1))
plot(abil,REs[,5],ylim=c(0,1))
plot(abil,REs[,6],ylim=c(0,1))
plot(abil,REs[,7],ylim=c(0,1))
plot(abil,REs[,8],ylim=c(0,1))
plot(abil,REs[,9],ylim=c(0,1))
plot(abil,REs[,10],ylim=c(0,1))
plot(smooth.spline(abil,REs[,10]),ylim=c(0,1))
plot(smooth.spline(abil,REs[,10]),ylim=c(0,1),type="l")
plot(smooth.spline(abil,REs[,1]),ylim=c(0,1),type="l")
plot(smooth.spline(abil,REs[,2]),ylim=c(0,1),type="l")
plot(smooth.spline(abil,REs[,3]),ylim=c(0,1),type="l")
plot(smooth.spline(abil,REs[,4]),ylim=c(0,1),type="l")
plot(smooth.spline(abil,REs[,5]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,5]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,1]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,2]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,3]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,4]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,5]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,6]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,7]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,8]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,9]),ylim=c(0,1),type="l")
plot(smooth.spline(log(abil),REs[,10]),ylim=c(0,1),type="l")
x$diff
rm(list=ls())
dev.off()
qgraph::auto_cor
?EGAnet::EGA
require(psych)
data("bfi")
head(bfi)
data <- bfi[,1:25]
### Step 1: Get clusters====
## Polychoric correlation
require(psych)
Corr <- tryCatch(psych::mixed.cor(data)$rho, error=function(e) {
cor(data, method="spearman")
})
n <- nrow(data)
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, n=n)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
}
clusters=NULL
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, n=n)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
}
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, n=n)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
clusters = "ega"
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, n=n)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=Corr, n=n)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
?EGA
Corr
EGA(cor(data))
EGA(data=cor(data))
EGA(data=cor(na.omit(data)))
EGA(data=cor(na.omit(data)), n=n)
n
EGAnet::EGA
### Step 1: Get clusters====
## Polychoric correlation
require(psych)
Corr <- tryCatch(psych::mixed.cor(data)$rho, error=function(e) {
cor(data, method="spearman")
})
n <- nrow(data)
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=Corr, n=n)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
### Step 1: Get clusters====
## Polychoric correlation
require(psych)
Corr <- tryCatch(psych::mixed.cor(data)$rho, error=function(e) {
cor(data, method="spearman")
})
n <- nrow(data)
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, plot.EGA=F)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
node_set
clusters="cgmm"
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, plot.EGA=F)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
node_set
clusters="ega"
n <- nrow(data)
if(length(clusters) == ncol(data)) {
node_set <- clusters
} else if (clusters=="ega") {
require(EGAnet)
Dims <- EGAnet::EGA(data=data, plot.EGA=F)
node_set <- Dims$wc
} else if (clusters=="cgmm") {
require(mclust)
HCA    <- mclust::Mclust(Corr)
node_set <- HCA$classification
} else {"No cluster values or method identified!"}
### Step 2: Group correlations====
## Average correlations
groupVS <- function(Corr,blocks) {
Bs <- length(unique(blocks))
Fisher <- psych::fisherz(Corr)
diag(Fisher) <- rep(NA, length(diag(Fisher)))
Test <- matrix(NA,ncol=Bs,nrow=Bs)
row.names(Test) <- colnames(Test) <- sapply(1:length(unique(blocks)),
function(g) paste("P",g,sep=""))
for (i in 1:Bs) {
for (j in 1:Bs) {
Test[i,j] <- psych::fisherz2r(mean(Fisher[which(blocks == i),
which(blocks == j)],na.rm=T))
}
}
return(Test)
}
PowerEdges <- groupVS(Corr,node_set)
V <- colnames(PowerEdges)
Ndata <- data.frame(sapply(1:ncol(data), function(g) as.numeric(data[,g])))
colnames(Ddata) <- colnames(data)
colnames(Ndata) <- colnames(data)
### Step 3: Structure Learning====
## IS1: Constraint-based structure learning algorithm
require(pcalg)
skel <- pcalg::skeleton(suffStat=list(C=PowerEdges, n=n),
indepTest=gaussCItest, alpha=alpha,
method="stable.fast", labels=V )
PowerEdges
skel <- pcalg::skeleton(suffStat=list(C=PowerEdges, n=n),
indepTest=gaussCItest, alpha=alpha,
method="stable.fast", labels=V )
alpha=.05
skel <- pcalg::skeleton(suffStat=list(C=PowerEdges, n=n),
indepTest=gaussCItest, alpha=alpha,
method="stable.fast", labels=V )
SK <- as(skel,'amat') == 1
fit <- pcalg::pc(suffStat=list(C=PowerEdges, n=n), fixedGaps=(SK==F),
indepTest=gaussCItest, alpha=alpha,
labels=V, skel.method="stable.fast" )
PC <- as(fit,'amat') == 1
PC
qgraph::qgraph(t(PC))
## IS2: Get full graph
SKT <- Corr; PCT <- Corr
for (i in 1:ncol(Corr)) {
for (j in 1:ncol(Corr)) {
SKT[i,j] <- SK[node_set[i],node_set[j]]
}
}
for (i in 1:ncol(Corr)) {
for (j in 1:ncol(Corr)) {
PCT[i,j] <- PC[node_set[i],node_set[j]]
}
}
qgraph::qgraph(t(PCT))
## IS3: Three types of fine tunning
m <- PCT
Blist1 = data.frame(to=rownames(m)[row(m)[lower.tri(m)]],
from=colnames(m)[col(m)[lower.tri(m)]],
corr=m[lower.tri(m)])
Blist1 <- Blist1[,c(2,1,3)]
Blist2 = data.frame(to=rownames(m)[row(m)[upper.tri(m)]],
from=colnames(m)[col(m)[upper.tri(m)]],
corr=m[upper.tri(m)])
Blist2 <- Blist2[,c(2,1,3)]
Blist <- rbind(Blist1,Blist2)
Blist <- Blist[Blist$corr == F,-3]
fitp <- bnlearn::pc.stable(Ndata, blacklist = Blist)
Ndata <- na.omit(Ndata)
fitp <- bnlearn::pc.stable(Ndata, blacklist = Blist)
fith <- bnlearn::hc(Ndata, blacklist = Blist)
fitm <- bnlearn::mmhc(Ndata, blacklist = Blist)
PCfu <- t(amat(fitp))
HCfu <- t(amat(fith))
MMHC <- t(amat(fitm))
?amat
require(bnlearn)
PCfu <- t(amat(fitp))
HCfu <- t(amat(fith))
MMHC <- t(amat(fitm))
qgraph::qgraph(t(PCfu))
?qgraph::qgraph
qgraph::qgraph(t(PCfu), groups=as.factor(node_set))
qgraph::qgraph(t(PCfu), groups=as.factor(node_set), layout="circle")
qgraph::qgraph(t(SK))
qgraph::qgraph(t(PC))
qgraph::qgraph(t(PCT))
nodes_set
dev.off()
rm(list=ls())
